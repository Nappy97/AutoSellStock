// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace AutoStock.Data;

public partial class AutoStockContext : DbContext
{
    public AutoStockContext()
    {
    }

    public AutoStockContext(DbContextOptions<AutoStockContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Account> Accounts { get; set; }

    public virtual DbSet<AccountDetail> AccountDetails { get; set; }

    public virtual DbSet<AccountDetailHistory> AccountDetailHistories { get; set; }

    public virtual DbSet<Code> Codes { get; set; }

    public virtual DbSet<CodeCategory> CodeCategories { get; set; }

    public virtual DbSet<Stock> Stocks { get; set; }

    public virtual DbSet<Token> Tokens { get; set; }


    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Account>(entity =>
        {
            entity.ToTable("Account");

            entity.Property(e => e.AccountId).ValueGeneratedNever();
            entity.Property(e => e.AccountNumber)
                .IsRequired()
                .HasMaxLength(30)
                .HasDefaultValue("")
                .HasComment("계좌번호");
            entity.Property(e => e.AccountTypeCode).HasComment("[14] 계좌 종류");
            entity.Property(e => e.CurrentAmount).HasComment("현재 계좌 평가금액");
            entity.Property(e => e.CurrentCurrency).HasComment("특이사항");
            entity.Property(e => e.Enabled)
                .HasDefaultValue(true)
                .HasComment("사용가능여부");
            entity.Property(e => e.Memo)
                .IsRequired()
                .HasMaxLength(1000)
                .HasDefaultValue("")
                .HasComment("현재 현금보유");
            entity.Property(e => e.StockFirmCode).HasComment("[13] 증권사 이름");
        });

        modelBuilder.Entity<AccountDetail>(entity =>
        {
            entity.ToTable("AccountDetail");

            entity.Property(e => e.AccountDetailId).ValueGeneratedNever();
            entity.Property(e => e.Memo)
                .IsRequired()
                .HasMaxLength(1000)
                .HasDefaultValue("");
            entity.Property(e => e.PurchasePrice).HasComment("개당 구매 가격");
            entity.Property(e => e.PurchaseQuantity).HasComment("구매 수량");
            entity.Property(e => e.PurchasedAt)
                .HasDefaultValueSql("(getdate())")
                .HasComment("구매 시각")
                .HasColumnType("smalldatetime");

            entity.HasOne(d => d.Account).WithMany(p => p.AccountDetails)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AccountDetail_Account");

            entity.HasOne(d => d.Stock).WithMany(p => p.AccountDetails)
                .HasForeignKey(d => d.StockId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AccountDetail_Stock");
        });

        modelBuilder.Entity<AccountDetailHistory>(entity =>
        {
            entity.ToTable("AccountDetailHistory");

            entity.Property(e => e.AccountDetailHistoryId).ValueGeneratedNever();
            entity.Property(e => e.Memo)
                .IsRequired()
                .HasMaxLength(1000)
                .HasDefaultValue("");
            entity.Property(e => e.Profits).HasComment("수익(수수료, 세금제외)");
            entity.Property(e => e.PurchasePrice).HasComment("개당 구매 가격");
            entity.Property(e => e.PurchaseQuantity).HasComment("구매 수량");
            entity.Property(e => e.PurchasedAt)
                .HasDefaultValueSql("(getdate())")
                .HasComment("구매 시각")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.SellPrice).HasComment("개당 판매 가격");
            entity.Property(e => e.SellQuantity).HasComment("판매 수량");
            entity.Property(e => e.SoledAt)
                .HasDefaultValueSql("(getdate())")
                .HasComment("판매 시각")
                .HasColumnType("smalldatetime");

            entity.HasOne(d => d.Account).WithMany(p => p.AccountDetailHistories)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AccountDetailHistory_Account");

            entity.HasOne(d => d.Stock).WithMany(p => p.AccountDetailHistories)
                .HasForeignKey(d => d.StockId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AccountDetailHistory_Stock");
        });

        modelBuilder.Entity<Code>(entity =>
        {
            entity.ToTable("Code");

            entity.Property(e => e.CodeId).ValueGeneratedNever();
            entity.Property(e => e.Enabled).HasDefaultValue(true);
            entity.Property(e => e.Memo)
                .IsRequired()
                .HasMaxLength(1000)
                .HasDefaultValue("");
            entity.Property(e => e.Text)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValue("");

            entity.HasOne(d => d.CodeCategory).WithMany(p => p.Codes)
                .HasForeignKey(d => d.CodeCategoryId)
                .HasConstraintName("FK_Code_CodeCategory");
        });

        modelBuilder.Entity<CodeCategory>(entity =>
        {
            entity.ToTable("CodeCategory");

            entity.Property(e => e.CodeCategoryId).ValueGeneratedNever();
            entity.Property(e => e.Text)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<Stock>(entity =>
        {
            entity.ToTable("Stock");

            entity.Property(e => e.StockId).ValueGeneratedNever();
            entity.Property(e => e.Enabled)
                .HasDefaultValue(true)
                .HasComment("자동매매 포함 여부");
            entity.Property(e => e.LocationCode).HasComment("[12] 주식 상장 위치(코스피, 코스닥)");
            entity.Property(e => e.Memo)
                .IsRequired()
                .HasMaxLength(1000)
                .HasDefaultValue("")
                .HasComment("특이사항");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(350)
                .HasDefaultValue("")
                .HasComment("주식 이름");
            entity.Property(e => e.NationalityCode).HasComment("[11] 주식 상장 국가");
            entity.Property(e => e.StockCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasDefaultValue("")
                .HasComment("거래를 위한 상품코드");
        });

        modelBuilder.Entity<Token>(entity =>
        {
            entity.ToTable("Token");

            entity.Property(e => e.TokenId).ValueGeneratedNever();
            entity.Property(e => e.AccessToken)
                .IsRequired()
                .HasMaxLength(350)
                .HasDefaultValue("")
                .HasComment("토큰 값");
            entity.Property(e => e.Enabled)
                .HasDefaultValue(true)
                .HasComment("사용 가능 여부");
            entity.Property(e => e.ExpiredAt)
                .HasDefaultValueSql("(getdate())")
                .HasComment("사용 종료일")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.Memo)
                .IsRequired()
                .HasMaxLength(1000)
                .HasDefaultValue("")
                .HasComment("특이사항");
            entity.Property(e => e.TypeCode).HasComment("[10] 토큰분류");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
